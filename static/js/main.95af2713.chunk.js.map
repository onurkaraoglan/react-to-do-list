{"version":3,"sources":["components/Form.jsx","components/TaskBoard.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Form","class","action","method","autocomplete","type","placeholder","name","TaskBoard","href","id","App","useEffect","document","querySelector","addEventListener","e","preventDefault","input","value","task","ul","li","createElement","innerHTML","appendChild","style","display","addTask","getElementById","target","className","remove","parentNode","removeChild","getElementsByTagName","length","deleteTask","nextSibling","checked","textDecoration","color","transition","tickTask","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2NASeA,EAPF,kBACT,0BAAMC,MAAM,GAAGC,OAAO,aAAaC,OAAO,OAAOC,aAAa,OAC1D,2BAAOC,KAAK,OAAOC,YAAY,WAAWC,KAAK,OAAOH,aAAa,QACnE,4BAASC,KAAK,UAAS,wCCKhBG,EARG,kBACd,yBAAKP,MAAM,cACP,6BAEA,uBAAGQ,KAAK,IAAIC,GAAG,SAAf,WC2EOC,G,KA5EH,WAiEV,OA/DAC,qBAAU,WAERC,SAASC,cAAc,QAAQC,iBAAiB,UAKhD,SAAgBC,GACdA,EAAEC,iBACF,IAAIC,EAAQL,SAASC,cAAc,SACf,KAAhBI,EAAMC,OAMZ,SAAiBC,GACf,IAAIC,EAAKR,SAASC,cAAc,MAC5BQ,EAAKT,SAASU,cAAc,MAChCD,EAAGE,UAAH,qFAA0FJ,EAA1F,YACAC,EAAGI,YAAYH,GACfT,SAASC,cAAc,eAAeY,MAAMC,QAAU,QAVpDC,CAAQV,EAAMC,OAChBD,EAAMC,MAAQ,MAThBN,SAASgB,eAAe,SAASd,iBAAiB,SAsBlD,SAAmBC,GACjBH,SAASC,cAAc,eAAeY,MAAMC,QAAU,UAtBxDd,SAASC,cAAc,MAAMC,iBAAiB,SA0B9C,SAAsBC,GACO,WAAvBA,EAAEc,OAAOC,UAQf,SAAoBf,GAClB,IAAIgB,EAAShB,EAAEc,OAAOG,WACLD,EAAOC,WACbC,YAAYF,GAET,IADFnB,SAASsB,qBAAqB,MAAMC,SAE9CvB,SAASC,cAAc,eAAeY,MAAMC,QAAU,QAbtDU,CAAWrB,GAiBf,SAAkBA,GAChB,IAAMI,EAAOJ,EAAEc,OAAOQ,YAClBtB,EAAEc,OAAOS,SACXnB,EAAKM,MAAMc,eAAiB,eAC5BpB,EAAKM,MAAMe,MAAQ,UACnBrB,EAAKM,MAAMgB,WAAa,YAExBtB,EAAKM,MAAMc,eAAiB,OAC5BpB,EAAKM,MAAMe,MAAQ,WAvBnBE,CAAS3B,QA2BZ,IAGD,yBAAKe,UAAU,OACb,yBAAKA,UAAU,QACb,0CACA,kBAAC,EAAD,MACA,kBAAC,EAAD,UC/DYa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtC,SAASgB,eAAe,SD0HpB,kBAAmBuB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.95af2713.chunk.js","sourcesContent":["import React from 'react';\n\nconst Form = () => (\n    <form class=\"\" action=\"index.html\" method=\"post\" autocomplete=\"off\">\n        <input type=\"text\" placeholder=\"New task\" name=\"task\" autocomplete=\"off\" />\n        <button  type=\"submit\"><strong>+</strong></button>\n    </form>\n)\n\nexport default Form;\n","import React from 'react';\n\nconst TaskBoard = () => (\n    <div class=\"tasksBoard\">\n        <ul>\n        </ul>\n        <a href=\" \" id=\"clear\">Clear</a>\n      </div>\n)\n\nexport default TaskBoard;\n","import React, { useEffect } from 'react';\nimport Form from \"./components/Form\"\nimport TaskBoard from \"./components/TaskBoard\"\nimport './App.css';\n\nconst App = () => {\n\n  useEffect(() => {\n    // load every event in the page\n    document.querySelector('form').addEventListener('submit', submit);\n    document.getElementById('clear').addEventListener('click', clearList);\n    document.querySelector('ul').addEventListener('click', deleteOrTick);\n\n    // subit data function\n    function submit(e) {\n      e.preventDefault();\n      let input = document.querySelector('input');\n      if (input.value !== '')\n        addTask(input.value);\n      input.value = '';\n    }\n\n    // add tasks\n    function addTask(task) {\n      let ul = document.querySelector('ul');\n      let li = document.createElement('li');\n      li.innerHTML = `<span class=\"delete\">Ã—</span><input type=\"checkbox\" class=\"cbox\"><label>${task}</label>`;\n      ul.appendChild(li);\n      document.querySelector('.tasksBoard').style.display = 'block';\n    }\n\n    // clear the LIST\n    function clearList(e) {\n      document.querySelector('.tasksBoard').style.display = 'none';\n    }\n\n    // deleteTick\n    function deleteOrTick(e) {\n      if (e.target.className === 'delete')\n        deleteTask(e);\n      else {\n        tickTask(e);\n      }\n    }\n\n    // delete task\n    function deleteTask(e) {\n      let remove = e.target.parentNode;\n      let parentNode = remove.parentNode;\n      parentNode.removeChild(remove);\n      let count = document.getElementsByTagName('li').length;\n      if (count === 0)\n        document.querySelector('.tasksBoard').style.display = 'none';\n    }\n\n    // tick a task\n    function tickTask(e) {\n      const task = e.target.nextSibling;\n      if (e.target.checked) {\n        task.style.textDecoration = \"line-through\";\n        task.style.color = \"#d3d3d3\";\n        task.style.transition = \"all .5s\";\n      } else {\n        task.style.textDecoration = \"none\";\n        task.style.color = \"#2f4f4f\";\n      }\n    }\n\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <div className=\"main\">\n        <h1>TO DO LIST</h1>\n        <Form />\n        <TaskBoard />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}